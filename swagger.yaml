swagger: '2.0'
info:
  title: Fortifi API
  version: "2.16.1"
  termsOfService: 'http://fortifi.co/legal/terms/api'
  description: >
    The second version of the Fortifi API is an exciting step forward towards

    making it easier for businesses to have open access to their data. We created it

    so that you can improve your business flows, and interact with your customers

    and data in more innovative ways.



    Build something great!



    Once you've

    [registered your service account](http://yourdomain.fortifi.it/developers/service-accounts/) it's easy

    to start requesting and posting data to and from Fortifi.



    All endpoints are only accessible via https and are located at

    `api.fortifi.io`. For instance: you can grab a list of all your brands

    by accessing the following URL with your Access Token

    (replace ACCESS_TOKEN with your own):

    ```
      https://api.fortifi.io/v1/brands?access_token=ACCESS_TOKEN

    ```


    ## Limits

    Be nice. If you're sending too many requests too quickly, we'll send back a

    `503` error code (server unavailable).

    You are limited to 5000 requests per hour per `access_token`.



    ## Request Methods

    We do our best to have all URLs

    [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).

    Every endpoint (URL) may support one of four different http verbs. GET

    requests fetch information about an object, POST requests create objects,

    PUT requests update objects, and finally DELETE requests will delete

    objects.



    ## Structure



    ### The Envelope

    Every response is contained by an envelope. That is, each response has a

    predictable set of keys with which you can expect to interact:

    ```json

    {
        "meta": {
            "code": 200
        },
        "data": {
            ...
        }
    }

    ```



    #### META

    The meta key is used to communicate extra information about the response to

    the developer. If all goes well, you'll only ever see a code key with

    value 200.

    However, sometimes things go wrong, and in that case you might see a

    response like:

    ```json

    {
        "meta": {
            "type": "OAuthException",
            "code": 400,
            "message": "..."
        }
    }

    ```


    #### DATA

    The data key is the meat of the response. It may be a list or dictionary,

    but either way this is where you'll find the data you requested.

    #### JSONP

    If you're writing an AJAX application, and you'd like to wrap our response

    with a callback, all you have to do is specify a callback parameter with

    any API call:

    ```

    https://api.fortifi.io/v1/brands?access_token=ACCESS_TOKEN&callback=callbackFunction

    ```

    Would respond with:

    ```js

    callbackFunction({
        ...
    });

    ```
host: api.fortifi.io
schemes:
  - https
basePath: /v1
produces:
  - application/json
consumes:
  - application/json
externalDocs:
  description: Find out more about the Fortifi api
  url: http://developers.fortifi.io/


tags:
  - name: Marketing
  - name: Customers
  - name: Entities
  - name: Orders
  - name: Custom Properties
  - name: Configuration
  - name: Contacts
  - name: Polymers
  - name: Messenger
  - name: Products
  - name: Licence
  - name: Support
  - name: Reasons

securityDefinitions:
  OAuth:
    type: oauth2
    authorizationUrl: 'https://api.fortifi.io/oauth/authorize'
    tokenUrl: 'https://api.fortifi.io/oauth/token'
    flow: accessCode
    scopes:
      "basic": Basic Read Access
      "visitor": Read/Write On Visitors
      "advertiser": Read/Write On Advertisers
      "customer": Read/Write On Customers
      "customer.readonly": Read Only on Customers
      "entity.properties": Read/Write On Entity Properties
      "entity.config": Read/Write On Entity Configuration
      "orders": Read/Write On Orders
      "orders.readonly": Read Only On Orders
      "products": Read/Write On Products
      "entity.events": Read/Write on Events
      "payment.methods": Read/Write On Payment Methods
      "contact": Read/Write On Contacts
      "polymer.readonly": Read Polymers
      "polymer": Read/Write On Polymers
      "product.readonly": Read Product Information
      "product": Read/Write On Products
      "purchase.readonly": Read Only on purchases
      "support": Read/Write On Support
      "support.readonly": Read Only on Support
      "reasons": Read/Write On reasons
      "reasons.readonly": Read Only on reasons

  accessToken:
    type: apiKey
    in: query
    name: access_token

paths:
  /version:
    get:
      security:
        - OAuth:
          - basic
        - accessToken: []
      summary: Current Version
      operationId: getVersion
      description: |
        Retrieve the current version of the Fortifi api
      responses:
        200:
          description: Version
          schema:
            type: string

  /svcauth/verify:
    post:
      summary: Verify service account / Get Access Token
      operationId: getServiceAuthToken
      description: |
        User service account credentials to retrieve an API token
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ServiceAccountCredentialsPayload'
      responses:
        200:
          description: Token
          schema:
            $ref: '#/definitions/AuthTokenResponse'

  /me:
    get:
      security:
        - OAuth:
          - basic
        - accessToken: []
      summary: Current User
      operationId: getMe
      description: |
        Retrieve information about the current connected user (you)
      responses:
        200:
          description: User Information
          schema:
              $ref: '#/definitions/User'

  /organisation:
    get:
      security:
        - OAuth:
          - basic
        - accessToken: []
      summary: Current Organisation
      operationId: getOrganisation
      description: |
        Retrieve information about the current organisation
      responses:
        200:
          description: Organisation Information
          schema:
              $ref: '#/definitions/Organisation'

  /brands:
    get:
      security:
        - OAuth:
          - basic
        - accessToken: []
      summary: Your Brand
      operationId: getBrands
      description: |
        Retrieve a list of all the brands within your Fortifi account
      responses:
        200:
          description: Brand Information
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'

  /advertisers:
    post:
      summary: Create a new advertiser
      security:
        - OAuth:
          - advertiser
        - accessToken: []
      tags:
       - marketing
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateAdvertiserPayload'
      responses:
       200:
         description: Advertiser Created
         schema:
           $ref: '#/definitions/Fid'
       400:
         description: |
           Invalid data supplied

  /advertisers/{advertiserFid}:
    get:
      security:
        - OAuth:
          - advertiser
        - accessToken: []
      tags:
       - marketing
      summary: Retrieve an advertiser
      parameters:
        - $ref: '#/parameters/advertiserFid'
      responses:
        200:
          description: Loaded Advertiser
          schema:
            $ref: '#/definitions/Advertiser'
        404:
          description: Advertiser not found

  /advertisers/{advertiserFid}/approved:
    put:
      security:
        - OAuth:
          - advertiser
        - accessToken: []
      tags:
        - marketing
      summary: Set approved status on an advertiser
      parameters:
        - $ref: '#/parameters/advertiserFid'
      responses:
        200:
          description: Approved Advertiser
        404:
          description: Advertiser not found

    delete:
      summary: Remove approved status on an advertiser
      tags:
        - marketing
      security:
        - OAuth:
          - advertiser
        - accessToken: []
      parameters:
        - $ref: '#/parameters/advertiserFid'
      responses:
        200:
          description: Advertiser no longer approved
        404:
          description: Advertiser not found

  /advertisers/{advertiserFid}/campaigns:
    post:
      summary: Create a new advertiser campaign
      security:
        - OAuth:
          - advertiser
        - accessToken: []
      tags:
       - marketing
      parameters:
        - $ref: '#/parameters/advertiserFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateAdvertiserCampaignPayload'
      responses:
       200:
         description: Campaign Created
         schema:
           $ref: '#/definitions/Fid'
       400:
         description: |
           Invalid data supplied

  /advertisers/{advertiserFid}/campaigns/{advertiserCampaignFid}:
    get:
      security:
        - OAuth:
          - advertiser
        - accessToken: []
      tags:
       - marketing
      summary: Retrieve an advertiser campaign
      parameters:
        - $ref: '#/parameters/advertiserFid'
        - $ref: '#/parameters/advertiserCampaignFid'
      responses:
        200:
          description: Loaded Campaign
          schema:
            $ref: '#/definitions/AdvertiserCampaign'
        404:
          description: Campaign not found

  "/visitors/{visitorId}/pixels":
    get:
      security:
        - OAuth:
          - visitor
        - accessToken: []
      tags:
        - marketing
      summary: Retrieve pending pixels for this visitor
      description: This call will release pixels from the pending queue on read
      parameters:
        - $ref: '#/parameters/visitorId'
      responses:
        200:
          description: Pixels
          schema:
            type: array
            items:
              $ref: '#/definitions/AdvertiserPixel'

  "/visitors/{visitorId}/actions/{actionKey}":
    post:
      summary: Track an action
      tags:
        - marketing
      description: |
        Track an action such as a lead or acquisition
      security:
        - OAuth:
          - visitor
        - accessToken: []
      parameters:
        - $ref: '#/parameters/visitorId'
        - name: actionKey
          description: Action key of the action to track e.g. lead
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PostActionPayload'

      responses:
        200:
          description: Action Tracked
          schema:
            $ref: '#/definitions/VisitorPostAction'
        409:
          description: |
            The transaction ID specified has already been used for this action
        400:
          description: |
            Not enough information was provided to complete your request
            e.g. Missing Visitor ID and/or Client IP
        404:
          description: |
            The actionKey specified does not exist

  "/visitors/{visitorId}/actions/{actionKey}/reverse":
    post:
      summary: Reverse a previously tracked action
      tags:
        - marketing
      description: |
        When an action has been reversed, e.g. cancelled, refunded
      security:
        - OAuth:
          - visitor
        - accessToken: []
      parameters:
        - $ref: '#/parameters/visitorId'
        - name: actionKey
          description: Action key of the action to reverse e.g. lead
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReverseActionPayload'

      responses:
        200:
          description: Action Reversed
          schema:
            $ref: '#/definitions/VisitorReversalAction'
        404:
          description: |
            The action you are trying to reverse cannot be found
        409:
          description: |
            The action specified has already been reversed

  /pay/publicKey:
    get:
      summary: Get the public key needed to encrypt a credit card number
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      parameters:
        - name: format
          in: query
          description: Format for the generated key xml, raw, pkcs1 or pkcs8.
          type: string
      responses:
        200:
          schema:
            $ref: '#/definitions/PubKey'
          description: RSA Public Key

  /pay/coinbase:
     get:
       summary: Get a new checkout ID
       security:
         - OAuth:
           - payment.methods
         - accessToken: []
       parameters:
         - name: orderFID
           in: query
           description: FID of the order for which to retrieve a checkout ID
           type: string
       responses:
        200:
          schema:
            $ref: '#/definitions/CoinbaseCheckout'
          description: Coinbase checkout ID

  /customers:
    post:
      summary: Create a new customer
      security:
        - OAuth:
          - customer
        - accessToken: []
      tags:
       - customers
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateCustomerPayload'
      responses:
       200:
         description: Customer Created
         schema:
           $ref: '#/definitions/Customer'
       404:
         description: |
           The brand Fid you are trying to add a customer to does not exist
       409:
         description: |
           The external reference has already been used to create a customer
         schema:
            $ref: '#/definitions/Fid'

  /customers/findByReference:
    get:
      security:
        - OAuth:
          - customer
          - customer.readonly
        - accessToken: []
      tags:
        - customers
      summary: Find a customer by your reference
      parameters:
        - name: reference
          in: query
          description: Your reference for the customer
          type: string
      responses:
        200:
          description: Located Customer
          schema:
            $ref: '#/definitions/Customer'
        404:
          description: Customer not found

  "/customers/{customerFid}":
    get:
      security:
        - OAuth:
          - customer
          - customer.readonly
        - accessToken: []
      tags:
        - customers
      summary: Retrieve a customer
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          description: Loaded Customer
          schema:
            $ref: '#/definitions/Customer'
        404:
          description: Customer not found
    put:
      security:
        - OAuth:
          - customer
          - customer.readonly
        - accessToken: []
      tags:
        - customers
      summary: Update a customer
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: firstName
          in: formData
          type: string
        - name: lastName
          in: formData
          type: string
      responses:
        200:
          description: Customer Updated
        404:
          description: Customer not found
    delete:
      security:
        - OAuth:
          - customer
        - accessToken: []
      tags:
        - customers
      summary: Archive a customer
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          description: Customer Archived
        403:
          description: It is not possible to archive this customer
        404:
          description: Customer not found

  "/customers/{customerFid}/accountStatus":
    put:
      summary: Update a customers status
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetAccountStatusPayload'
      responses:
        200:
          description: Customer Status Updated
        404:
          description: Customer not found

  "/customers/{customerFid}/note":
    post:
      summary: Save a note against a customer
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: note
          in: formData
          required: true
          description: Text content of note
          type: string
        - name: colour
          in: formData
          required: false
          description: Colour of the new ticket
          type: string
          enum:
            - blue
            - red
            - orange
            - yellow
            - indigo
            - violet
            - green
            - pink
            - grey
      responses:
        200:
          description: Customer note saved
        400:
          description: Invalid Payload

  "/customers/{customerFid}/location":
    put:
      summary: Update a customers location
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetCustomerLocationPayload'
      responses:
        200:
          description: Customer Status Updated
        404:
          description: Customer not found

  "/customers/{customerFid}/accountType":
    put:
      summary: Update a customers status
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetAccountTypePayload'
      responses:
        200:
          description: Customer Status Updated
        404:
          description: Customer not found

  "/customers/{customerFid}/subscriptionType":
    put:
      summary: Update a customers status
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetSubscriptionTypePayload'
      responses:
        200:
          description: Customer Status Updated
        404:
          description: Customer not found

  "/customers/{customerFid}/qualified":
    put:
      summary: Mark customer as qualified, this action cannot be undone.
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/isoTime'
      responses:
        200:
          description: Customer Marked
        404:
          description: Customer not found

  "/customers/{customerFid}/chargeback":
    put:
      summary: Mark customer as charged back, this action cannot be undone.
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/isoTime'
      responses:
        200:
          description: Customer Marked
        404:
          description: Customer not found

  "/customers/{customerFid}/fraud":
    put:
      summary: Mark customer as fraudulent, this action cannot be undone.
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/isoTime'
      responses:
        200:
          description: Customer Marked
        404:
          description: Customer not found

  "/customers/{customerFid}/purchased":
    put:
      summary: Mark customer as purchased, this action cannot be undone.
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/isoTime'
      responses:
        200:
          description: Customer Marked
        404:
          description: Customer not found

  "/customers/{customerFid}/loyal":
    put:
      summary: Set customer loyalty flag
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          description: Customer Loyalty Acknowledged
        404:
          description: Customer not found

    delete:
      summary: Remove customer loyalty flag
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          description: Customer No Longer Loyal
        404:
          description: Customer not found

  "/customers/{customerFid}/vip":
    put:
      summary: Set customer as VIP
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          description: Customer Now VIP
        404:
          description: Customer not found

    delete:
      summary: Remove customer VIP Status
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          description: Customer No Longer VIP
        404:
          description: Customer not found

  "/customers/{customerFid}/currency":
    put:
      summary: Set customer Currency
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: currency
          in: formData
          required: true
          description: Currency (ISO 4217, 3 Character Code)
          type: string
      responses:
        200:
          description: Customer Currency Updated
        404:
          description: Customer not found

  "/customers/{customerFid}/payments/{paymentFid}/chargeback":
    post:
      summary: Initiate a chargeback on a payment
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: paymentFid
          in: path
          type: string
          required: true
          description: Payment FID to use
        - name: dateSubmitted
          type: string
          in: formData
          required: true
          description: Date the chargeback was received
        - name: reasonCode
          type: string
          in: formData
          required: true
          description: Chargeback Reason Code (see https://github.com/packaged/rwd/blob/master/src/Finance/Chargeback/ChargebackReasonHelper.php)
        - name: caseNumber
          type: string
          in: formData
          required: true
          description: Case Number
        - name: amount
          type: number
          format: float
          in: formData
          required: true
          description: Disputed Amount
        - name: state
          type: string
          in: formData
          enum:
            - alert
            - initiated
            - disputed
            - won
            - lost
            - undisputed_loss
          required: true
          description: Current State
        - name: source
          type: string
          enum:
            - gateway
            - ethoca
            - verifi
          in: formData
          required: true
          description: Source of the alert, or gateway for everything else
        - name: refunded
          type: boolean
          in: formData
          required: true
          description: If this payment has been refunded by the alert
        - name: description
          type: string
          in: formData
          required: false
          description: Notes
        - name: feeCurrency
          type: string
          in: formData
          required: false
          description: 3 Character Currency code for the fee
        - name: feeAmount
          type: number
          format: float
          in: formData
          required: false
          description: Fee Amount
      responses:
        200:
          description: Chargeback Opened
          schema:
            $ref: '#/definitions/Fid'
        400:
          description: Invalid Payload
        404:
          description: Invalid Payment Fid

  "/customers/{customerFid}/chargebacks/{chargebackFid}":
    put:
      summary: Action a chargeback
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: chargebackFid
          in: path
          type: string
          required: true
          description: Chargeback FID to use
        - name: reasonCode
          type: string
          in: formData
          required: true
          description: Chargeback Reason Code (see https://github.com/packaged/rwd/blob/master/src/Finance/Chargeback/ChargebackReasonHelper.php)
        - name: caseNumber
          type: string
          in: formData
          required: true
          description: Case Number
        - name: state
          type: string
          in: formData
          enum:
            - alert
            - initiated
            - disputed
            - won
            - lost
            - undisputed_loss
          required: true
          description: Current State
        - name: refunded
          type: boolean
          in: formData
          required: true
          description: If this payment has been refunded by the alert
        - name: description
          type: string
          in: formData
          required: false
          description: Notes
      responses:
        200:
          description: Chargeback Actioned
          schema:
            $ref: '#/definitions/BoolMessage'
        400:
          description: Invalid Payload

  "/customers/{customerFid}/tickets":
    post:
      summary: Create a new support ticket
      tags:
        - customers
        - support
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: subject
          in: formData
          required: true
          description: Subject of the support ticket
          type: string
        - name: content
          in: formData
          required: true
          description: Content of the support ticket
          type: string
        - name: recipient
          in: formData
          required: true
          description: Receiver email address e.g. support@yourdomain.com
          type: string
        - name: sender
          in: formData
          required: true
          description: Sender email address e.g. user@customer.com
          type: string
        - name: departmentFid
          in: formData
          required: false
          description: Department FID
          type: string
      responses:
        200:
          description: Customer Currency Updated
        404:
          description: Customer not found
    get:
      summary: Get support tickets for customer
      tags:
       - customers
       - support
      security:
        - OAuth:
          - entity.config
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          schema:
            $ref: '#/definitions/Tickets'
          description: Ticket collection


  "/entities/{entityFid}/config/{sectionName}":
    delete:
      summary: Remove a config section, or property from an entity
      tags:
        - Configuration
      security:
        - OAuth:
          - entity.config
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/sectionName'
        - name: itemName
          in: formData
          type: string
      responses:
        200:
          description: Config Item Deleted

    get:
      summary: Retrieve a config section
      tags:
        - Configuration
      security:
        - OAuth:
          - entity.config
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/sectionName'
      responses:
        200:
          schema:
            $ref: '#/definitions/ConfigItems'
          description: List Of Config Items

    post:
      summary: Write a config item
      tags:
        - Configuration
      security:
        - OAuth:
          - entity.config
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/sectionName'
        - name: itemName
          in: formData
          required: true
          type: string
        - name: value
          in: formData
          required: true
          type: string

      responses:
        200:
          description: Config Item Saved
        400:
          description: Invalid Entity

  "/entities/{entityFid}/config/{sectionName}/items/{itemName}":
      get:
        summary: Retrieve a config item
        tags:
          - Configuration
        security:
          - OAuth:
            - entity.config
          - accessToken: []
        parameters:
          - $ref: '#/parameters/entityFid'
          - $ref: '#/parameters/sectionName'
          - $ref: '#/parameters/itemName'
        responses:
          200:
            schema:
              $ref: '#/definitions/ConfigItem'
            description: Config Item


  "/entities/{entityFid}/properties":
    put:
      summary: Write multiple entity properties
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PropertyBulkSetPayload'

      responses:
        200:
          description: Properties Saved
        400:
          description: Invalid Entity

  "/entities/{entityFid}/properties/values/{propertyName}":
    delete:
      summary: Remove a value property from an entity
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/propertyName'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PropertyValuePayload'

      responses:
        200:
          description: Property Deleted

    put:
      summary: Write an entity value property
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/propertyName'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PropertyValuePayload'

      responses:
        200:
          description: Property Saved
        400:
          description: Invalid Entity

  "/entities/{entityFid}/properties/flags/{propertyName}":
    delete:
      summary: Remove a flag from an entity
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/propertyName'

      responses:
        200:
          description: Property Deleted

    put:
      summary: Write an entity flag
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/propertyName'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PropertyFlagPayload'

      responses:
        200:
          description: Flag Saved
        400:
          description: Invalid Entity


  "/entities/{entityFid}/properties/counters/{propertyName}":
    delete:
      summary: Remove a counter from an entity
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/propertyName'

      responses:
        200:
          description: Property Deleted

  "/entities/{entityFid}/properties/counters/{propertyName}/increment":
    put:
      summary: Increment an entity counter
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/propertyName'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PropertyCounterPayload'

      responses:
        200:
          description: Counter Incremented
        400:
          description: Invalid Entity

  "/entities/{entityFid}/properties/counters/{propertyName}/decrement":
    put:
      summary: Decrement an entity counter
      tags:
        - Custom Properties
      security:
        - OAuth:
          - entity.properties
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - $ref: '#/parameters/propertyName'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PropertyCounterPayload'

      responses:
        200:
          description: Counter Decremented
        400:
          description: Invalid Entity

  "/entities/{entityFid}/events":
    post:
      summary: Trigger a new event
      security:
        - OAuth:
          - entity.events
        - accessToken: []
      parameters:
        - $ref: '#/parameters/entityFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerActionPayload'
      responses:
        200:
          description: Event Triggered

  "/customers/{customerFid}/paymentAccounts":
    get:
      summary: List customers payment accounts
      tags:
        - customers
        - payment.methods
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          schema:
            $ref: '#/definitions/PaymentAccounts'
          description: List of payment accounts
        400:
          description: Error retrieving payment accounts

  "/customers/{customerFid}/paymentMethods/paypal/initialise":
    post:
      summary: Initialise a new paypal agreement for existing subscriptions
      tags:
        - customers
        - payment.methods
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/paymentServiceFid'
        - $ref: '#/parameters/subscriptionFids'
        - name: successUrl
          type: string
          in: formData
          required: true
        - name: cancelUrl
          type: string
          in: formData
          required: true
        - name: failUrl
          type: string
          in: formData
          required: true
      responses:
        200:
          schema:
            $ref: '#/definitions/PaypalInit'
          description: Redirect instructions
        501:
          description: Inable to initialise Paypal agreement

  "/customers/{customerFid}/paymentMethods/paypal/complete":
    post:
      summary: Complete a paypal agreement created with initialise
      tags:
        - customers
        - payment.methods
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/paymentServiceFid'
        - $ref: '#/parameters/subscriptionFids'
        - name: token
          type: string
          in: formData
          required: true
      responses:
        200:
          description: Successfully created agreement
        400:
          description: Failed to complete Paypal agreement

  "/customers/{customerFid}/paymentMethods/cards":
    post:
      summary: Add a new card
      tags:
        - customers
        - paymentMethods
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CardDataPayload'

      responses:
        200:
          schema:
            $ref: '#/definitions/Fid'
          description: Credit card added to the customers account

    get:
      summary: List customers card payment methods
      tags:
        - customers
        - payment.methods
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
        200:
          schema:
            $ref: '#/definitions/PaymentCards'
          description: List of cards

  "/customers/{customerFid}/paymentMethods/cards/{cardFid}":
    delete:
      tags:
        - customers
        - paymentMethods
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/cardFid'
      responses:
        200:
          description: Card Removed

    put:
      tags:
        - customers
        - paymentMethods
      security:
        - OAuth:
          - payment.methods
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/cardFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CardUpdatePayload'

      summary: Update a card
      responses:
        200:
          description: Card Updated

  "/customers/{customerFid}/addresses":
    get:
      summary: List customers addresses
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
      responses:
         200:
           schema:
             $ref: '#/definitions/Addresses'
           description: List of addresses

  "/customers/{customerFid}/emails":
    post:
      summary: Add an email address to a customer
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: emailAddress
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Email Added
        404:
          description: Customer not found

  "/customers/{customerFid}/phones":
    post:
      security:
        - OAuth:
          - customer
        - accessToken: []
      summary: Add a phone number to a customer
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: phoneNumber
          in: formData
          required: true
          type: string
        - name: displayName
          in: formData
          type: string
      responses:
        200:
          description: Phone Number Added
        404:
          description: Customer not found

  "/customers/{customerFid}/invoices":
    get:
      summary: List of invoice summaries for given customer
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: limit
          in: query
          description: "Maximum number of records per page (default: 20)"
          required: false
          type: string
        - name: page
          in: query
          description: "Page number (default: 0)"
          required: false
          type: string
      responses:
        200:
          description: List of invoices summaries
          schema:
            $ref: '#/definitions/Invoices'

  "/customers/{customerFid}/invoices/{invoiceFid}":
    get:
      summary: Retreive a specific itemised invoice
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/invoiceFid'
      responses:
        200:
          description: Loaded invoice
          schema:
            $ref: '#/definitions/Invoice'
        404:
          description: Invoice not found

  "/customers/{customerFid}/invoices/{invoiceFid}/creditNote":
    post:
      security:
        - OAuth:
          - customer
        - accessToken: []
      summary: Add a credit note to a customers invoice
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/invoiceFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/InvoiceCreditNotePayload'
      responses:
        200:
          description: Credit Note Added
          schema:
            $ref: '#/definitions/InvoiceCreditNote'
        404:
          description: Invoice not found
        400:
          description: Issue adding credit note to invoice

  "/customers/{customerFid}/subscriptions":
    get:
      summary: List of subscription summaries for given customer
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - name: limit
          in: query
          description: "Maximum number of records per page (default: 20)"
          required: false
          type: string
        - name: page
          in: query
          description: "Page number (default: 0)"
          required: false
          type: string
      responses:
        200:
          description: List of subscription summaries
          schema:
            $ref: '#/definitions/Subscriptions'

  "/customers/{customerFid}/subscriptions/{subscriptionFid}":
    get:
      summary: Retreive a specific subscription
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
      responses:
        200:
          description: Loaded subscription
          schema:
            $ref: '#/definitions/Subscription'
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/enableAutoCharge":
    put:
      summary: Enable auto charge on specific subscription
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
      responses:
        200:
          description: Auto charge enabled
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/disableAutoCharge":
    put:
      summary: Disable auto charge on specific subscription
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
      responses:
        200:
          description: Auto charge disabled
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/reEnableRenewal":
    put:
      summary: Re-enable renewals on a subscription
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
        - name: reason
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Renewals Enabled
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/setParentSubscription":
    put:
      summary: Set parent subscription on a subscription
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
        - name: parentSubscriptionFid
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Parent subscription set
          schema:
            $ref: '#/definitions/Fid'
        400:
          description: Cannot create cyclic reference
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/modify":
    put:
      summary: Modify an existing subscription with a new price. Returns new open order to be completed
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModifySubscriptionPayload'
      responses:
        200:
          description: Created new open order
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid payload data
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/updateRenewalPrice":
    put:
      summary: Modify an existing subscription with a new price which will be used for the next renewal
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
        - name: priceFid
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Subscription price updated
          schema:
            $ref: '#/definitions/Fid'
        400:
          description: Invalid payload data
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/applyOffer":
    put:
      summary: Apply an offer to a subscription
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
        - name: offerFid
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Offer applied

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/preRenew":
    put:
      summary: Pre-renew an existing subscription with a different price. Returns new open order to be completed
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
        - name: priceFid
          in: formData
          required: true
          description: Price FID
          type: string
      responses:
        200:
          description: Created new open order
          schema:
            $ref: '#/definitions/Fid'
        400:
          description: Invalid payload data
        404:
          description: Subscription not found

  "/customers/{customerFid}/subscriptions/{subscriptionFid}/cancel":
    put:
      summary: Cancel a subscripion. Returns subscription FID.
      tags:
        - customers
      security:
        - OAuth:
          - customer
        - accessToken: []
      parameters:
        - $ref: '#/parameters/customerFid'
        - $ref: '#/parameters/subscriptionFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/SubscriptionCancelPayload'
      responses:
        200:
          description: Subscription cancelled
          schema:
            $ref: '#/definitions/Subscription'
        400:
          description: Invalid payload data
        404:
          description: Subscription not found

  /products:
    get:
      summary: List all products
      tags:
        - products
      security:
        - OAuth:
          - product.readonly
        - accessToken: []
      responses:
        200:
          description: Products retrieved
          schema:
            $ref: '#/definitions/Products'

  "/products/groups":
      get:
        summary: Get a list of all product groups
        tags:
          - products
        security:
          - OAuth:
            - product.readonly
          - accessToken: []
        responses:
          200:
            description: Products groups
            schema:
              $ref: '#/definitions/ProductGroups'

  "/products/{productFid}/prices":
    get:
      summary: Retrieve Product Prices
      tags:
        - products
      security:
        - OAuth:
          - product.readonly
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/productFid'
        - name: currency
          in: formData
          required: false
          type: string
      responses:
        200:
          description: List of product prices
          schema:
            $ref: '#/definitions/ProductPrices'
        404:
          description: Product not found

  /orders:
    post:
      summary: Create a new order
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateOrderPayload'
      responses:
        200:
          description: Order created successfully
          schema:
            $ref: '#/definitions/Fid'

  "/orders/{orderFid}":
    get:
      summary: Retrieve an order
      tags:
        - orders
      security:
        - OAuth:
          - orders.readonly
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
      responses:
        200:
          description: Order retrieved
          schema:
            $ref: '#/definitions/Order'
        404:
          description: Order not found

  "/orders/{orderFid}/verify":
    put:
      summary: Verify an order, returning any security urls
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/VerifyOrderPayload'
      responses:
        200:
          description: Order payment account verified
          schema:
            $ref: '#/definitions/OrderVerification'

  "/orders/{orderFid}/confirmCard":
    put:
      summary: Confirm an order, authorize the payment
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConfirmCardOrderPayload'
      responses:
        503:
          description: There are no payment gateways available to handle your request
        200:
          description: Order confirmed and payment authroized
          schema:
            $ref: '#/definitions/OrderConfirmation'

  "/orders/{orderFid}/confirmPayPal":
    put:
      summary: Confirm an order, authorize the payment
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConfirmPayPalOrderPayload'
      responses:
        503:
          description: There are no payment gateways available to handle your request
        200:
          description: Order confirmed and payment authroized
          schema:
            $ref: '#/definitions/OrderConfirmation'

  "/orders/{orderFid}/confirmCoinbase":
    put:
      summary: Confirm an order, await payment
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
      responses:
        503:
          description: There are no payment gateways available to handle your request
        200:
          description: Order confirmed; awaiting blockchain confirmation.
          schema:
            $ref: '#/definitions/OrderConfirmation'

  "/orders/{orderFid}/confirmNewCard":
    put:
      summary: Confirm an order with a new card, authorize the payment
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConfirmOrderWithNewCardPayload'
      responses:
        503:
          description: There are no payment gateways available to handle your request
        200:
          description: Order confirmed and payment authroized
          schema:
            $ref: '#/definitions/OrderConfirmation'

  "/orders/{orderFid}/products":
    get:
      summary: Retrieve order products
      tags:
        - orders
      security:
        - OAuth:
          - orders.readonly
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
      responses:
        200:
          description: List of order products
          schema:
            $ref: '#/definitions/OrderProducts'
        404:
          description: Order not found
    post:
      summary: Add a product to an order
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/AddOrderProductsPayload'
      responses:
        200:
          description: Product added to the order successfully
          schema:
            $ref: '#/definitions/OrderAddProducts'

  "/orders/{orderFid}/products/{orderProductFid}":
    delete:
      summary: Remove a product from an order
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
        - $ref: '#/parameters/orderProductFid'
      responses:
        200:
          description: Product removed from the order successfully

  "/orders/{orderFid}/products/{orderProductFid}/quantity":
    put:
      summary: Set the quantity of a product on an order
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/orderFid'
        - $ref: '#/parameters/orderProductFid'
        - name: quantity
          in: formData
          required: true
          type: number
      responses:
        200:
          description: Quantity updated

  "/orders/{orderFid}/offers":
    post:
      summary: Add an offer to an order
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/orderFid'
        - name: offerFid
          in: formData
          required: true
          type: string
        - name: productFid
          in: formData
          type: string
        - name: orderItemFid
          in: formData
          type: string
        - name: replace
          in: formData
          type: boolean
      responses:
        200:
          description: Offer added to the order successfully
        404:
          description: Order not found

  "/orders/{orderFid}/offers/{offerFid}":
    delete:
      summary: Remove an offer from an order
      tags:
        - orders
      security:
        - OAuth:
          - orders
        - accessToken: []
      parameters:
        - $ref: '#/parameters/orderFid'
        - $ref: '#/parameters/offerFid'
      responses:
        200:
          description: Offer removed from the order successfully
        404:
          description: Order not found

  "/messenger/deliveries/{deliveryFid}/unsubscribe":
    put:
      summary: Unsubscribe an email based on the delivery fid
      tags:
        - Contacts
        - Messenger
      security:
        - OAuth:
          - contact
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/deliveryFid'
        - $ref: '#/parameters/userAgent'
        - $ref: '#/parameters/encoding'
        - $ref: '#/parameters/language'
        - $ref: '#/parameters/clientIp'
      responses:
        200:
          description: Email Address Unsubscribed
        404:
          description: Email Address not found

  "/contacts/emails/{emailAddress}/confirm":
    put:
      summary: Confirm email address
      tags:
        - Contacts
      security:
        - OAuth:
          - contact
        - accessToken: []
      parameters:
        - $ref: '#/parameters/emailAddress'
      responses:
        200:
          description: Email Address Confirmed
        404:
          description: Email Address not found

  "/contacts/emails/{emailAddress}/unsubscribe":
    put:
      summary: Unsubscribe an email address
      tags:
        - Contacts
      security:
        - OAuth:
          - contact
        - accessToken: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/emailAddress'
        - name: brandFid
          in: formData
          type: string
          description: Brand to unsubscribe the email address from
      responses:
        200:
          description: Email Address Unsubscribed
        404:
          description: Email Address not found

  "/polymers":
    post:
      summary: Create a new polymer
      tags:
        - polymers
      security:
        - OAuth:
          - polymer
        - accessToken: []
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreatePolymerPayload'
      responses:
        200:
          description: Polymer created
          schema:
              $ref: '#/definitions/Fid'
        400:
          description: Information provided is not valid

  "/polymers/{polymerFid}":
    get:
      summary: Read a polymer
      tags:
        - polymers
      security:
        - OAuth:
          - polymer.readonly
        - accessToken: []
      parameters:
        - name: polymerFid
          in: path
          required: true
          type: string
      responses:
        200:
          description: Polymer Information
          schema:
              $ref: '#/definitions/Entity'
        404:
          description: Polymer not found

  "/products/offers":
      get:
        summary: Retrieve all offers
        tags:
          - products
        security:
          - OAuth:
            - product.readonly
          - accessToken: []
        responses:
          200:
            description: Available Offers
            schema:
              $ref: '#/definitions/ProductOffers'

  "/licence/check":
    get:
      summary: Retrieve A Licence
      tags:
        - licence
      security:
        - OAuth:
          - purchase.readonly
        - accessToken: []
      parameters:
        - name: key
          in: query
          type: string
      responses:
        200:
          description: Licence Information
          schema:
            $ref: '#/definitions/Licence'
        404:
          description: Licence Not Valid

  "/reasons/groups":
    get:
      summary: Get a list of all reason groups
      tags:
        - reasons
      security:
        - OAuth:
          - reasons.readonly
        - accessToken: []
      parameters:
        - $ref: '#/parameters/reasonGroupType'
      responses:
        200:
          description: Reason groups
          schema:
            $ref: '#/definitions/ReasonGroups'

  "/reasons/groups/{reasonGroupFid}":
    get:
      summary: Get all the reasons for the reason group
      tags:
        - reasons
      security:
        - OAuth:
          - reasons.readonly
        - accessToken: []
      parameters:
        - $ref: '#/parameters/reasonGroupFid'
      responses:
        200:
          description: Reason Group retrieved
          schema:
            $ref: '#/definitions/Reasons'
        404:
          description: reasonGroupFid not found

  "/tickets":
    post:
      summary: Create a support ticket
      tags:
        - support
      security:
        - OAuth:
          - support
        - accessToken: []
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateTicketPayload'
      responses:
        200:
          description: Ticket Information
          schema:
            $ref: '#/definitions/Ticket'

parameters:
  isoTime:
    name: isoTime
    description: Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
    type: string
    format: date-time
    in: formData
  userAgent:
    name: userAgent
    in: formData
    description: User Agent of the visitors browser 'HTTP_USER_AGENT'
    type: string
  language:
    name: language
    in: formData
    description: Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'
    type: string
  encoding:
    name: encoding
    in: formData
    description: Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'
    type: string
  clientIp:
    name: clientIp
    in: formData
    description: IP Address of the visitor
    type: string
  visitorId:
    name: visitorId
    in: path
    type: string
    required: true
    description: |
      "Visitor ID from the cookie.
      If providing a pre-linked external reference, should be set to 'byref'.
      If no visitor ID is known, client IP should be provided and visitorId should be set to 'unknown'"
  advertiserFid:
    name: advertiserFid
    in: path
    type: string
    required: true
    description: Advertiser FID to use
  advertiserCampaignFid:
    name: advertiserCampaignFid
    in: path
    type: string
    required: true
    description: Advertiser Campaign FID to use
  customerFid:
    name: customerFid
    in: path
    type: string
    required: true
    description: Customer FID to use
  invoiceFid:
    name: invoiceFid
    in: path
    type: string
    required: true
    description: Invoice Fid to use
  paymentServiceFid:
    name: paymentServiceFid
    in: formData
    type: string
    required: true
    description: Payment Service FID to use
  subscriptionFid:
    name: subscriptionFid
    in: path
    type: string
    required: true
    description: Subscription FID to use
  subscriptionFids:
    name: subscriptionFids
    in: formData
    type: array
    items:
      type: string
    required: true
    description: Subscription FIDs
  emailAddress:
    name: emailAddress
    in: path
    type: string
    required: true
    description: Email Address
  deliveryFid:
    name: deliveryFid
    in: path
    type: string
    required: true
    description: Delivery FID
  entityFid:
    name: entityFid
    in: path
    type: string
    required: true
    description: Entity FID to use
  propertyName:
    name: propertyName
    in: path
    required: true
    type: string
    description: Property Name
  sectionName:
    name: sectionName
    in: path
    required: true
    type: string
    description: Section Name
  itemName:
    name: itemName
    in: path
    required: true
    type: string
    description: Item Name
  productFid:
    name: productFid
    in: path
    required: true
    type: string
  orderFid:
    name: orderFid
    in: path
    required: true
    type: string
  offerFid:
    name: offerFid
    in: path
    required: true
    type: string
  orderProductFid:
    name: orderProductFid
    in: path
    required: true
    type: string
  cardFid:
    name: cardFid
    in: path
    required: true
    type: string
  reasonGroupFid:
    name: reasonGroupFid
    in: path
    required: true
    type: string
  reasonGroupType:
    name: reasonGroupType
    in: query
    required: false
    type: string
definitions:
#Responses
  Fid:
    properties:
      fid:
        type: string
        description: Object FID
    required:
      - fid

  BoolMessage:
    properties:
      message:
        type: string
        description: Status Message
      result:
        type: boolean
        description: Success or Not
    required:
      - message
      - result

  Entity:
    allOf:
      - $ref: '#/definitions/Fid'
      - properties:
          displayName:
            type: string
            description: Display Name
          description:
            type: string
            description: Description

  PubKey:
    properties:
      key:
        type: string
        description: RSA Public Key

  CoinbaseCheckout:
    properties:
      checkoutID:
        type: string
        description: Coinbase checkout ID

  User:
    allOf:
      - $ref: '#/definitions/Fid'
      - properties:
          username:
            type: string
            description: Username
          language:
            type: string
            description: Language
          timezone:
            type: string
            description: Timezone for this user

  Organisation:
    properties:
      orgName:
        type: string
      orgFid:
        type: string
      orgDomain:
        type: string

  Brand:
    properties:
      brandName:
        type: string
      primaryDomain:
        type: string
      brandFid:
        type: string

  Customer:
    allOf:
      - $ref: '#/definitions/Fid'
      - properties:
          name:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          phone:
            type: string
          externalReference:
            type: string
          companyFid:
            type: string

  Advertiser:
    allOf:
      - $ref: '#/definitions/Fid'
      - properties:
          type:
            type: string
          displayName:
            type: string
          contactName:
            type: string
          companyName:
            type: string
          phoneFid:
            type: string
          emailFid:
            type: string
          website:
            type: string
          acceptedTerms:
            type: string
          suspended:
            type: string
          accountManagerFid:
            type: string
          foundationFid:
            type: string
          companyFid:
            type: string
          isDisabled:
            type: string
          email:
            type: string
          phone:
            type: string
          payoutType:
            type: string
          approved:
            type: boolean

  AdvertiserCampaign:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          hash:
            type: string
          affiliateFid:
            type: string
          brandFid:
            type: string

  AdvertiserPixel:
    properties:
      url:
        type: string
      method:
        type: string
        enum:
          - iframe
          - img
          - js
          - curl
          - html
      content:
        type: string

  VisitorPostAction:
    properties:
      visitorId:
       type: string
      eventId:
        type: string
      sid1:
        type: string
      sid2:
        type: string
      sid3:
        type: string
      advertiserFid:
        type: string
      campaignFid:
        type: string
      commission:
        type: number
        format: float
      commissionCurrency:
        type: string
      pixels:
        type: array
        items:
          $ref: '#/definitions/AdvertiserPixel'

  VisitorReversalAction:
    properties:
      visitorId:
       type: string
      eventId:
        type: string
      advertiserFid:
        type: string
      campaignFid:
        type: string
      reversedCommission:
        type: number
        format: float
      feeCharged:
        type: number
        format: float
      commissionCurrency:
        type: string

  Licence:
    properties:
        purchaseFid:
          type: string
        customerFid:
          type: string
        status:
          type: string
        dateCreated:
          $ref: '#/definitions/isoTime'
        lastRenewDate:
          $ref: '#/definitions/isoTime'
        renewDate:
          $ref: '#/definitions/isoTime'
        nextRenewDate:
          $ref: '#/definitions/isoTime'
        autoSuspendDate:
          $ref: '#/definitions/isoTime'
        autoCancelDate:
          $ref: '#/definitions/isoTime'
        startDate:
          $ref: '#/definitions/isoTime'
        endDate:
          $ref: '#/definitions/isoTime'
        trialStartDate:
          $ref: '#/definitions/isoTime'
        trialEndDate:
          $ref: '#/definitions/isoTime'
        cycleTerm:
          type: string
        cycleExact:
          type: string
        cycleType:
          type: string

  keyValuePayload:
    properties:
      key:
        type: string
      value:
        type: string

  Subscriptions:
    allOf:
      - $ref: "#/definitions/Pagination"
      - properties:
          subscriptions:
            type: array
            items:
              $ref: "#/definitions/SubscriptionSummary"

  SubscriptionSummary:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          lastRenewed:
            $ref: '#/definitions/isoTime'
          renewalDate:
            $ref: '#/definitions/isoTime'
          paidUntil:
            $ref: '#/definitions/isoTime'
          cycle:
            type: string
          autoCharge:
            type: boolean
          productFid:
            type: string
          renewalPrice:
            type: number
            format: float
          status:
            type: string

  Subscription:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          amount:
            type: number
            format: float
          autoCancelDate:
            $ref: '#/definitions/isoTime'
          autoCharge:
            type: boolean
          autoSuspendDate:
            $ref: '#/definitions/isoTime'
          cancelDays:
            type: integer
            format: int32
          cancelReason:
            type: string
          currency:
            type: string
          cycle:
            type: string
          dateCancelled:
            $ref: '#/definitions/isoTime'
          dateCreated:
            $ref: '#/definitions/isoTime'
          dateInactive:
            $ref: '#/definitions/isoTime'
          dateModified:
            $ref: '#/definitions/isoTime'
          dateStateChanged:
            $ref: '#/definitions/isoTime'
          dateSuspended:
            $ref: '#/definitions/isoTime'
          dateUpgraded:
            $ref: '#/definitions/isoTime'
          discount:
            type: number
            format: float
          endDate:
            $ref: '#/definitions/isoTime'
          invoiceFid:
            type: string
          isPaid:
            type: boolean
          lastRenewDate:
            $ref: '#/definitions/isoTime'
          nextPaymentDate:
            $ref: '#/definitions/isoTime'
          nextRenewalAmount:
            type: number
            format: float
          nextRenewDate:
            $ref: '#/definitions/isoTime'
          paidRenewals:
            type: integer
            format: int32
          paidUntil:
            $ref: '#/definitions/isoTime'
          quantity:
            type: integer
            format: int32
          renewalAdvanceDays:
            type: integer
            format: int32
          renewDate:
            $ref: '#/definitions/isoTime'
          setupAmount:
            type: number
            format: float
          setupDiscount:
            type: number
            format: float
          shouldCancel:
            type: boolean
          shouldSuspend:
            type: boolean
          startDate:
            $ref: '#/definitions/isoTime'
          status:
            type: string
          suspendDays:
            type: integer
            format: int32
          suspendReason:
            type: string
          taxAmount:
            type: number
            format: float
          totalAmount:
            type: number
            format: float
          totalRenewals:
            type: integer
            format: int32
          trialEndDate:
            $ref: '#/definitions/isoTime'
          trialStartDate:
            $ref: '#/definitions/isoTime'
          uniqueReference:
            type: string

  Invoices:
    allOf:
      - $ref: "#/definitions/Pagination"
      - properties:
          invoices:
            type: array
            items:
              $ref: "#/definitions/InvoiceSummary"

  InvoiceSummary:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          invoiceNumber:
            type: integer
            format: int32
          invoiceDate:
            $ref: '#/definitions/isoTime'
          currency:
            type: string
          dueDate:
            $ref: '#/definitions/isoTime'
          paymentDate:
            $ref: '#/definitions/isoTime'
          amountPaid:
            type: number
            format: float
          baseAmount:
            type: number
            format: float
          discountAmount:
            type: number
            format: float
          taxAmount:
            type: number
            format: float
          creditedAmount:
            type: number
            format: float
          totalAmount:
            type: number
            format: float
          outstandingAmount:
            type: number
            format: float
          refundAmount:
            type: number
            format: float
          invoiceStatus:
            type: string

  Invoice:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          invoiceDate:
            $ref: '#/definitions/isoTime'
          invoiceNumber:
            type: integer
            format: int32
          currency:
            type: string
          dueDate:
            $ref: '#/definitions/isoTime'
          paymentDate:
            $ref: '#/definitions/isoTime'
          amountPaid:
            type: number
            format: float
          baseAmount:
            type: number
            format: float
          discountAmount:
            type: number
            format: float
          taxAmount:
            type: number
            format: float
          creditedAmount:
            type: number
            format: float
          totalAmount:
            type: number
            format: float
          outstandingAmount:
            type: number
            format: float
          refundAmount:
            type: number
            format: float
          invoiceStatus:
            type: string
          totalItems:
            type: integer
            format: int32
          invoiceItems:
            type: array
            items:
              $ref: "#/definitions/InvoiceItem"

  InvoiceItem:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          totalAmount:
            type: number
            format: float
          subItems:
            type: array
            items:
              $ref: "#/definitions/InvoiceSubItem"

  InvoiceSubItem:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          fromDate:
            $ref: '#/definitions/isoTime'
          toDate:
            $ref: '#/definitions/isoTime'
          perUnitAmount:
            type: number
            format: float
          totalAmount:
            type: number
            format: float
          itemType:
            type: string
          quantity:
            type: integer
            format: int32

  InvoiceCreditNote:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          invoiceFid:
            type: string
          chargeRequestFid:
            type: string
          creditDate:
            $ref: '#/definitions/isoTime'
          amount:
            type: number
            format: float
          currency:
            type: string

  Pagination:
    properties:
      limit:
        type: integer
        format: int32
      page:
        type: integer
        format: int32
      totalItems:
        type: integer
        format: int32

  Products:
    properties:
      products:
        type: array
        items:
          $ref: "#/definitions/Product"

  Product:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          productType:
            type: integer
            format: int32
          parentFid:
            type: string
          statementDescription:
            type: string
          trialDays:
            type: integer
            format: int32
          defaultPriceFid:
            type: string
          defaultPrice:
            $ref: "#/definitions/ProductPrice"
          taxable:
            type: integer
            format: int64
          taxGroupFid:
            type: string
          maxQuantity:
            type: integer
            format: int64
          allowQuantity:
            type: integer
            format: int32

  ProductGroups:
    properties:
      groups:
        type: array
        items:
          $ref: "#/definitions/ProductGroup"

  ProductGroup:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          products:
            type: array
            items:
              $ref: "#/definitions/Fid"

  ProductPrices:
    properties:
      prices:
        type: array
        items:
          $ref: "#/definitions/ProductPrice"

  ProductPrice:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          productFid:
            type: string
          currency:
            type: string
          price:
            type: number
            format: float
          setupFee:
            type: number
            format: float
          cycleType:
            $ref: "#/definitions/cycleTermType"
          cycleTerm:
            type: string
          cycleExact:
            type: string

  Order:
    allOf:
      - $ref: '#/definitions/Fid'
      - properties:
          orderHash:
            type: string
          state:
            type: string
          queueFid:
            type: string
          offerFid:
            type: string
          couponCode:
            type: string
          amount:
            type: number
            format: float
          setupAmount:
            type: number
            format: float
          taxAmount:
            type: number
            format: float
          totalAmount:
            type: number
            format: float
          currency:
            type: string
          country:
            type: string
          discountAmount:
            type: number
            format: float
          discountType:
            type: string
          approvedByFid:
            type: string
          userAgent:
            type: string
          userIp:
            type: string
          paymentAccountFid:
            type: string
          paymentServiceType:
            type: string
          lastPaymentFid:
            type: string
          brandFid:
            type: string
          customerFid:
            type: string
          fraudFid:
            type: string
          invoiceFid:
            type: string
          amountPaid:
            type: number
            format: float
          authorizeId:
            type: string

  OrderProducts:
    properties:
      products:
        type: array
        items:
          $ref: "#/definitions/OrderProduct"

  OrderAddProducts:
    allOf:
      - $ref: '#/definitions/OrderProducts'
      - properties:
          order:
            $ref: '#/definitions/Order'

  OrderProduct:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          price:
            type: number
            format: float
          priceFid:
            type: string
          offerFid:
            type: string
          productFid:
            type: string
          quantity:
            type: number
          renewalDate:
            $ref: '#/definitions/isoTime'

  OrderVerification:
    properties:
      requireRedirect:
        type: boolean
      redirectUrl:
        type: string

  OrderConfirmation:
    properties:
      paymentAccountFid:
        type: string
      paymentMode:
        $ref: '#/definitions/PaymentMode'
      success:
        type: boolean
      message:
        type: string

  PaymentAccounts:
    properties:
      accounts:
        type: array
        items:
          $ref: "#/definitions/PaymentAccount"

  PaypalInit:
    properties:
      redirectUrl:
        type: string

  PaymentAccount:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          accountType:
            $ref: '#/definitions/PaymentAccountType'
          paymentMethod:
            $ref: '#/definitions/PaymentMethod'
          paymentMode:
            $ref: '#/definitions/PaymentMode'

  PaymentCards:
    properties:
      cards:
        type: array
        items:
          $ref: "#/definitions/PaymentCard"

  PaymentCard:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          nameOnCard:
            type: string
          expiryMonth:
            type: number
          expiryYear:
            type: number
          issue:
            type: number
          last4:
            type: number
          cardType:
            type: string

  Addresses:
    properties:
      addresses:
        type: array
        items:
          $ref: "#/definitions/Address"

  Address:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          address1:
            type: string
          address2:
            type: string
          address3:
            type: string
          town:
            type: string
          county:
            type: string
          country:
            type: string
          postalCode:
            type: string

  ConfigItems:
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/ConfigItem"

  ConfigItem:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          entityFid:
            type: string
          sectionName:
            type: string
          itemName:
            type: string
          value:
            type: string

  ProductOffers:
    properties:
      offers:
        type: array
        items:
          $ref: '#/definitions/ProductOffer'

  ProductOffer:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          couponCode:
            type: string
          applyFid:
            type: string
          maxUsages:
            type: integer
            format: int32
          expiryTime:
            $ref: '#/definitions/isoTime'
          discountAmount:
            type: number
            format: float
          discountType:
            $ref: "#/definitions/discountType"
          setupDiscountAmount:
            type: number
            format: float
          setupDiscountType:
            $ref: "#/definitions/discountType"
          term:
            type: integer
            format: int32
          termType:
            $ref: "#/definitions/cycleTermType"
          restrictive:
            type: boolean

  Tickets:
    properties:
      tickets:
        type: array
        items:
          $ref: '#/definitions/Ticket'

  Ticket:
    allOf:
      - $ref: '#/definitions/Entity'
      - properties:
          hash:
            type: string
          customerFid:
            type: string
          companyFid:
            type: string
          departmentFid:
            type: string
          queueFid:
            type: string
          agentFid:
            type: string
          slaFid:
            type: string
          ticketType:
            type: string
          status:
            type: number
            format: int64
          impact:
            type: number
            format: int64
          urgency:
            type: number
            format: int64
          priority:
            type: number
            format: int64
          tier:
            type: number
            format: int64
          outboundEmail:
            type: string
          outboundName:
            type: string
          inboundEmail:
            type: string
          inboundName:
            type: string
          isSpam:
            type: boolean
          responseTargetTime:
            type: number
            format: int64
          resolveTargetTime:
            type: number
            format: int64
          postCount:
            type: number
            format: int64
          lastReplySentTime:
            type: number
            format: int64
          lastReplyReceivedTime:
            type: number
            format: int64
          priorityAdjustment:
            type: number
            format: int64
          locked:
            type: boolean
          lockedByFid:
            type: string
          attachments:
            type: number
            format: int64
          restrictedAccess:
            type: boolean
          cc:
            type: string
          bcc:
            type: string
          language:
            type: string
          dataCreated:
            type: number
            format: int64
          dateModified:
            type: number
            format: int64

  ReasonGroups:
    properties:
      reasonGroups:
        type: array
        items:
          $ref: '#/definitions/ReasonGroup'

  ReasonGroup:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          builtIn:
            type: boolean
          reasonCount:
            type: number
            format: int64
          type:
            $ref: '#/definitions/reasonGroupType'

  Reasons:
    properties:
      reasons:
        type: array
        items:
          $ref: '#/definitions/Reason'

  Reason:
    allOf:
      - $ref: "#/definitions/Entity"
      - properties:
          groupFid:
            $ref: '#/definitions/reasonGroupFid'
          usedCount:
            type: number
            format: int64

#Payloads
  ServiceAccountCredentialsPayload:
    description: Service credentials used to verify ownership of a user account
    properties:
      id:
        type: string
      key:
        type: string
    required:
      - id
      - key

  AuthTokenResponse:
    description: Authentication token used to access services
    properties:
      token:
        type: string
      expiry:
        type: number
        format: int64

  InvoiceCreditNotePayload:
    properties:
      displayName:
        type: string
      description:
        type: string
      chargeRequestFid:
        $ref: '#/definitions/chargeRequestFid'
      creditAmountType:
        $ref: '#/definitions/creditAmountType'
      amount:
        type: number
        format: float
      reasonFid:
        $ref: '#/definitions/reasonFid'
      currency:
        $ref: '#/definitions/currency'
    required:
      - creditAmountType
      - amount

  ModifySubscriptionPayload:
    properties:
      priceFid:
        $ref: '#/definitions/priceFid'
      offerFid:
        $ref: '#/definitions/offerFid'
      mode:
        $ref: '#/definitions/ModifySubscriptionMode'
    required:
      - priceFid

  SubscriptionCancelPayload:
    properties:
      reasonFid:
        $ref: '#/definitions/reasonFid'
      subscriptionRefundType:
        $ref: '#/definitions/SubscriptionRefundType'
    required:
      - subscriptionRefundType

  CreatePolymerPayload:
    properties:
      polymerCode:
        description: Code for polymer type
        type: string
      name:
        description: Display name for this polymer
        type: string
      parentFid:
        description: Fid for the parent of this polymer e.g. customerFid
        type: string
      description:
        description: Description for this polymer
        type: string

  CreateAdvertiserPayload:
    description: Payload for creating an advertiser
    properties:
      username:
        $ref: '#/definitions/username'
      email:
        $ref: '#/definitions/email'
      password:
        $ref: '#/definitions/password'
      type:
        $ref: '#/definitions/advertiserType'
      displayName:
        $ref: '#/definitions/displayName'
      contactName:
        type: string
        description: Name of the person
      companyName:
        type: string
        description: Name of the company
      phone:
        $ref: '#/definitions/phoneNumber'
      website:
        $ref: '#/definitions/url'
      accountManagerFid:
        $ref: '#/definitions/accountManagerFid'
      foundationFid:
        $ref: '#/definitions/foundationFid'
      brandFid:
        $ref: '#/definitions/brandFid'
    required:
      - username
      - password
      - type
      - contactName

  CreateAdvertiserCampaignPayload:
    description: Payload for creating an advertiser campaign
    properties:
      brandFid:
        $ref: '#/definitions/brandFid'
      displayName:
        $ref: '#/definitions/displayName'
    required:
      - brandFid
      - displayName

  PostActionPayload:
    properties:
      transactionId:
        description: Your unique transaction ID for this event e.g. Order ID
        type: string
      transactionValue:
        description: Your unique transaction ID for this event
        type: number
        format: float
      couponCode:
        description: Coupon code used for the transaction
        type: string
      returnPixels:
        description: |
          Setting to true will return advertiser pixels for this event
        type: boolean
        default: true
      productCode:
        type: string
        description: Product Code linked to this action
      productTerm:
        type: string
        description: Product Term
      paymentMethod:
        type: string
        description: Payment method used on this transaction
      username:
        type: string
        description: Username associated with this transaction (e.g. Join)
      userAgent:
        $ref: '#/definitions/userAgent'
      encoding:
        $ref: '#/definitions/encoding'
      language:
        $ref: '#/definitions/language'
      clientIp:
        $ref: '#/definitions/clientIp'
      externalReference:
        $ref: '#/definitions/visitorExternalReference'
      brandFid:
        $ref: '#/definitions/brandFid'
      campaignHash:
        $ref: '#/definitions/campaignHash'
      sid1:
        $ref: '#/definitions/sid1'
      sid2:
        $ref: '#/definitions/sid2'
      sid3:
        $ref: '#/definitions/sid3'
      metaData:
        $ref: '#/definitions/metaData'
      time:
        $ref: '#/definitions/isoTime'
    required:
      - brandFid

  ReverseActionPayload:
    properties:
      userAgent:
        $ref: '#/definitions/userAgent'
      encoding:
        $ref: '#/definitions/encoding'
      language:
        $ref: '#/definitions/language'
      clientIp:
        $ref: '#/definitions/clientIp'
      externalReference:
        $ref: '#/definitions/visitorExternalReference'
      time:
        $ref: '#/definitions/isoTime'
      metaData:
        $ref: '#/definitions/metaData'
      sourceTransactionId:
        $ref: '#/definitions/sourceTransactionId'
      reason:
        $ref: '#/definitions/reversalReason'
      reversalAmount:
        $ref: '#/definitions/reversalAmount'
      reversalId:
        $ref: '#/definitions/reversalId'
      eventId:
        $ref: '#/definitions/eventId'

  CreateCustomerPayload:
    description: Payload for creating a customer
    properties:
      visitorId:
        $ref: '#/definitions/visitorId'
      clientIp:
        $ref: '#/definitions/clientIp'
      externalReference:
        $ref: '#/definitions/externalReference'
      time:
        $ref: '#/definitions/isoTime'
      brandFid:
        $ref: '#/definitions/brandFid'
      currency:
        $ref: '#/definitions/currency'
      phoneNumber:
        $ref: '#/definitions/phoneNumber'
      email:
        $ref: '#/definitions/email'
      firstName:
        $ref: '#/definitions/firstName'
      lastName:
        $ref: '#/definitions/lastName'
      accountManagerFid:
        $ref: '#/definitions/accountManagerFid'
      accountType:
        $ref: '#/definitions/customerAccountType'
      accountStatus:
        $ref: '#/definitions/customerAccountStatus'
      lifecycle:
        $ref: '#/definitions/customerLifecycle'
      subscriptionType:
        $ref: '#/definitions/customerSubscriptionType'
    required:
      - brandFid

  SetCustomerLocationPayload:
    properties:
      continent:
        type: string
        description: Continent
      country:
        type: string
        description: Country
      county:
        type: string
        description: County
      city:
        type: string
        description: City
      postal:
        type: string
        description: Postal
      timezone:
        type: string
        description: Timezone
      clientIp:
        type: string
        description: Client IP Address

  SetAccountStatusPayload:
    properties:
      accountStatus:
        $ref: '#/definitions/customerAccountStatus'

  SetAccountTypePayload:
    properties:
      accountType:
        $ref: '#/definitions/customerAccountType'

  SetSubscriptionTypePayload:
    properties:
      subscriptionType:
        $ref: '#/definitions/customerSubscriptionType'

  PropertyValuePayload:
    properties:
      propertyValue:
        description: Property Value
        type: string

  PropertyBulkSetPayload:
    properties:
      values:
        type: array
        description: Additional information to store
        items:
          $ref: '#/definitions/keyValuePayload'
      flags:
        type: array
        description: Additional information to store
        items:
          $ref: '#/definitions/keyValuePayload'
      incrementCounters:
        type: array
        description: Additional information to store
        items:
          $ref: '#/definitions/keyValuePayload'
      decrementCounters:
        type: array
        description: Additional information to store
        items:
          $ref: '#/definitions/keyValuePayload'

  PropertyFlagPayload:
    properties:
      propertyValue:
        description: Property Flag Value
        type: boolean

  PropertyCounterPayload:
    properties:
      propertyValue:
        description: Property Counter Adjustment
        type: integer
        format: int32

  TriggerActionPayload:
    properties:
      metaData:
        $ref: '#/definitions/metaData'
      time:
        $ref: '#/definitions/isoTime'
      alias:
        type: string
        description: Your alias for the event to be triggered
      triggerMessenger:
        type: boolean
        description: If set to true, transactional messenger chains will be triggered

  CardDataPayload:
    properties:
      cardDisplayName:
        $ref: '#/definitions/displayName'
      encryptedCardNumber:
        $ref: '#/definitions/cardEncryptedNumber'
      startMonth:
        $ref: '#/definitions/cardStartMonth'
      startYear:
        $ref: '#/definitions/cardStartYear'
      expiryMonth:
        $ref: '#/definitions/cardExpiryMonth'
      expiryYear:
        $ref: '#/definitions/cardExpiryYear'
      last4:
        $ref: '#/definitions/cardLast4'
      cardType:
        $ref: '#/definitions/cardType'
      issue:
        $ref: '#/definitions/cardIssue'
      cardHolder:
        $ref: '#/definitions/cardCardHolder'
      addressFid:
        $ref: '#/definitions/cardAddressFid'
      addressLine1:
        $ref: '#/definitions/cardAddressLine1'
      addressLine2:
        $ref: '#/definitions/cardAddressLine2'
      addressLine3:
        $ref: '#/definitions/cardAddressLine3'
      addressCity:
        $ref: '#/definitions/cardAddressCity'
      addressState:
        $ref: '#/definitions/cardAddressState'
      addressCountry:
        $ref: '#/definitions/cardAddressCountry'
      addressPostal:
        $ref: '#/definitions/cardAddressPostal'
      preAuthAmount:
          description: Pre Auth the card for this value to verify the card can be charged.  (Pre Auth will be voided)
          type: number
          format: float
      isDefault:
        $ref: '#/definitions/cardIsDefault'

  CardUpdatePayload:
    properties:
      cardHolder:
        $ref: '#/definitions/cardCardHolder'
      startMonth:
        $ref: '#/definitions/cardStartMonth'
      startYear:
        $ref: '#/definitions/cardStartYear'
      expiryMonth:
        $ref: '#/definitions/cardExpiryMonth'
      expiryYear:
        $ref: '#/definitions/cardExpiryYear'
      issue:
        $ref: '#/definitions/cardIssue'
      addressFid:
        $ref: '#/definitions/cardAddressFid'
      addressLine1:
        $ref: '#/definitions/cardAddressLine1'
      addressLine2:
        $ref: '#/definitions/cardAddressLine2'
      addressLine3:
        $ref: '#/definitions/cardAddressLine3'
      addressCity:
        $ref: '#/definitions/cardAddressCity'
      addressState:
        $ref: '#/definitions/cardAddressState'
      addressCountry:
        $ref: '#/definitions/cardAddressCountry'
      addressPostal:
        $ref: '#/definitions/cardAddressPostal'
      asDefault:
        type: boolean

  CreateOrderPayload:
    properties:
      paymentAccountFid:
        $ref: '#/definitions/paymentAccountFid'
      brandFid:
        $ref: '#/definitions/brandFid'
      customerFid:
        $ref: '#/definitions/customerFid'
      clientIp:
        $ref: '#/definitions/clientIp'
      userAgent:
        $ref: '#/definitions/userAgent'
      type:
        $ref: '#/definitions/CreateOrderType'
      productPriceFids:
        type: array
        description: Product price FIDs to add
        items:
          type: string
      offerFids:
        type: array
        description: Offer FIDs to apply to the order
        items:
          type: string

  AddOrderProductsPayload:
    properties:
      productPriceFids:
        type: array
        description: Product price FIDs to add
        items:
          type: string
      quantityProductPriceFids:
        type: array
        description: Products to add with specified quantity
        items:
          $ref: '#/definitions/OrderProductQuantityPayload'

  OrderProductQuantityPayload:
    properties:
      priceFid:
        $ref: '#/definitions/priceFid'
      quantity:
        type: number
        default: 1
    required:
      - priceFid

  ConfirmOrderPayload:
    properties:
      paymentServiceFid:
        $ref: '#/definitions/paymentServiceFid'
      paymentAccountFid:
        $ref: '#/definitions/paymentAccountFid'
      paymentServiceProcessor:
        $ref: '#/definitions/PaymentServiceProcessor'

  ConfirmCardOrderPayload:
    allOf:
      - $ref: '#/definitions/ConfirmOrderPayload'
      - properties:
          cvv:
            type: string

  ConfirmOrderWithNewCardPayload:
    properties:
      cardDisplayName:
        $ref: '#/definitions/displayName'
      paymentServiceFid:
        $ref: '#/definitions/paymentServiceFid'
      encryptedCardNumber:
        $ref: '#/definitions/cardEncryptedNumber'
      startMonth:
        $ref: '#/definitions/cardStartMonth'
      startYear:
        $ref: '#/definitions/cardStartYear'
      expiryMonth:
        $ref: '#/definitions/cardExpiryMonth'
      expiryYear:
        $ref: '#/definitions/cardExpiryYear'
      issue:
        $ref: '#/definitions/cardIssue'
      last4:
        $ref: '#/definitions/cardLast4'
      cardType:
        $ref: '#/definitions/cardType'
      cardHolder:
        $ref: '#/definitions/cardCardHolder'
      addressFid:
        $ref: '#/definitions/cardAddressFid'
      addressLine1:
        $ref: '#/definitions/cardAddressLine1'
      addressLine2:
        $ref: '#/definitions/cardAddressLine2'
      addressLine3:
        $ref: '#/definitions/cardAddressLine3'
      addressCity:
        $ref: '#/definitions/cardAddressCity'
      addressState:
        $ref: '#/definitions/cardAddressState'
      addressCountry:
        $ref: '#/definitions/cardAddressCountry'
      addressPostal:
        $ref: '#/definitions/cardAddressPostal'

  ConfirmPayPalOrderPayload:
    allOf:
      - $ref: '#/definitions/ConfirmOrderPayload'
      - properties:
          token:
            type: string

  VerifyOrderPayload:
    allOf:
      - $ref: '#/definitions/ConfirmOrderPayload'
      - properties:
          successUrl:
            type: string
          cancelUrl:
            type: string
          failUrl:
            type: string

  CreateTicketPayload:
    properties:
      customerEmail:
        type: string
      customerName:
        type: string
      customerFid:
        type: string
      ticketType:
        type: string
      brandFid:
        type: string
      queueFid:
        type: string
      departmentFid:
        type: string
      departmentEmail:
        type: string
      departmentName:
        type: string
      subject:
        type: string
      textBody:
        type: string
      htmlBody:
        type: string

#Properties
  priceFid:
    description: Price FID to modify subscription with
    type: string
  offerFid:
    description: Price FID to modify subscription with
    type: string
  reasonFid:
    description: Reason FID
    type: string
  chargeRequestFid:
    description: Charge Request FID
    type: string
  creditAmountType:
    description: Credit amount type
    type: string
    enum:
    - percent_of_remaining
    - percent_of_total
    - fixed
  ModifySubscriptionMode:
    description: Mode to modify subscription with
    type: string
    enum:
    - prorate
    - extend
    - replace
  PaymentAccountType:
    description: Payment account type
    type: string
    enum:
    - unknown
    - visa
    - mastercard
    - amex
    - jcb
    - discover
    - diners
    - encrypted
    - paypal_personal
    - paypal_premier
    - paypal_business
    - paypal_verified
    - paypal_unverified
    - paypal
    - bitcoin
    - account_balance
  PaymentMethod:
    description: Payment Method
    type: string
    enum:
    - creditcard
    - debitcard
    - cheque
    - cash
    - prepaidcard
    - directdebit
    - bacs
    - standingorder
    - chaps
    - onlineservice
    - telephone
    - creditnote
    - virtualcard
    - giftcard
    - unknown
    - multiple
    - paypal
    - bitcoin
    - account_balance
  PaymentMode:
    description: Payment Mode
    type: string
    enum:
    - automatic
    - request
  isoTime:
    description: Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
    type: string
    format: date-time
  userAgent:
    description: User Agent of the visitors browser 'HTTP_USER_AGENT'
    type: string
  language:
    description: Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'
    type: string
  encoding:
    description: Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'
    type: string
  clientIp:
    description: IP Address of the visitor
    type: string
  visitorExternalReference:
    description: External (to Fortifi) Reference for this visitor e.g. a user ID
    type: string
  brandFid:
    description: FID of a valid Brand
    type: string
  foundationFid:
    description: FID of a valid Foundation
    type: string
  campaignHash:
    description: |
      Advertiser Campaign to track this action to (if not already locked)
    type: string
  sid1:
    type: string
    description: Advertised sub tracking ID 1
  sid2:
    type: string
    description: Advertised sub tracking ID 2
  sid3:
    type: string
    description: Advertised sub tracking ID 3
  metaData:
    type: array
    description: Additional information to store
    items:
      $ref: '#/definitions/keyValuePayload'
  sourceTransactionId:
    description: Your unique transaction ID for the event to be reversed
    type: string
  reversalReason:
    description: The reason for reversing the action
    type: string
    enum:
    - chargeback
    - cancel
    - fraud
  reversalAmount:
    description: Amount of revene refunded to the client from the original transaction / chargeback amount
    type: number
    format: float
  reversalId:
    description: Your unique transaction ID for this event e.g. Refund ID
    type: string
  eventId:
    description: If known, the Fortifi event ID for this visitors action
    type: string
  visitorId:
    description: Visitor ID of the visitor
    type: string
  currency:
    description: Currency
    type: string
  phoneNumber:
    description: Phone Number
    type: string
  displayName:
    description: Visible Display Name
    type: string
  firstName:
    description: First Name
    type: string
  lastName:
    description: Last Name
    type: string
  username:
    type: string
    description: Username
  password:
    type: string
    description: Password
  url:
    type: string
    description: URL
  email:
    type: string
    description: Email Address
  accountManagerFid:
    description: FID of an Account Manager
    type: string
  advertiserType:
    description: Advertiser Type
    type: string
    enum:
    - affiliate
    - network
    - customer
  customerAccountType:
    description: Account Type
    type: string
    enum:
    - unknown
    - business
    - residential
    - student
  customerAccountStatus:
    description: Account Status
    type: string
    enum:
    - setup
    - active
    - suspended
    - expired
    - cancelled
  cycleTermType:
    description: Term Type
    type: string
    enum:
      - onetime
      - lifetime
      - day
      - week
      - month
      - year
  discountType:
    description: Discount Type
    type: string
    enum:
      - fixed
      - percentage
  customerLifecycle:
    description: Customer Lifecycle Stage
    type: string
    enum:
    - prospect
    - customer
    - closed
  customerSubscriptionType:
    description: Customer Subscription Status
    type: string
    enum:
    - none
    - trial
    - free
    - paid
  PaymentServiceProcessor:
    description: Payment Service Processor Type
    type: string
    enum:
    - paypal
    - wire
    - blackhole
    - cheque
    - prepayment
    - fortifipay
    - coinbase
  CreateOrderType:
    description: Order Type (Must be initial to Auth Cards)
    type: string
    enum:
    - initial
    - purchase
  SubscriptionRefundType:
    description: Subscription Refund Type
    type: string
    enum:
    - prorate
    - full
  externalReference:
    description: External (to Fortifi) Reference e.g. your internal Unique ID
    type: string
  cardEncryptedNumber:
    description: Card number encrypted using your public key
    type: string
  cardStartMonth:
    description: Start Month of the card
    type: integer
    format: int32
  cardStartYear:
    description: Start Year of the card
    type: integer
    format: int32
  cardExpiryMonth:
    description: Expiration Month of the card
    type: integer
    format: int32
  cardExpiryYear:
    description: Expiration Year of the card
    type: integer
    format: int32
  cardLast4:
    description: Last 4 digits of the credit card number
    type: string
  cardType:
    description: Card issuer (visa, mastercard, etc)
    type: string
  cardIssue:
    description: Issue number of the card
    type: integer
    format: int32
  cardCardHolder:
    description: Name as appears on card
    type: string
  cardAddressFid:
    description: FID of an existing address to use with the card
    type: string
  cardAddressCity:
    description: City for the card
    type: string
  cardAddressCountry:
    description: Country of the card
    type: string
  cardAddressLine1:
    description: Address Line 1 of the card
    type: string
  cardAddressLine2:
    description: Address Line 2 of the card
    type: string
  cardAddressLine3:
    description: Address Line 3 of the card
    type: string
  cardAddressState:
    description: State/County of the card
    type: string
  cardAddressPostal:
    description:  Postal/Zip Code of the card
    type: string
  cardIsDefault:
    description: Is this card should be used as the primary card on the account
    type: boolean
  paymentAccountFid:
    description: FID for the payment account you wish to charge the customer through
    type: string
  paymentServiceFid:
    description: FID for the payment service you wish to charge the customer through
    type: string
  customerFid:
    type: string
    description: FID for the customer placing the order
  reasonGroupFid:
    type: string
    description: FID for the reason group
  reasonGroupType:
    description: Reason Group Type
    type: string
    enum:
    - cancel
    - suspend
    - refund
    - credit
